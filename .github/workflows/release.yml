name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"

jobs:
  release:
    name: Build
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: .zip
            extension: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: .zip
            extension: .exe
          - os: macos-latest
            target: x86_64-apple-darwin
            archive: .zip
            extension: ""
        toolchain: [stable]
        feature: [ipadic, ko-dic, cc-cedict]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Run checkout
        uses: actions/checkout@v4

      - name: Cache ~/.cargo/registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache ~/.cargo/git
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          targets: ${{ matrix.target }}

      - name: Add msbuild to PATH
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v2

      - name: Compile
        run: cargo build --release --features=${{ matrix.feature }} --target=${{ matrix.target }} --target-dir=target/${{ matrix.feature }}

      - name: Create artifact for Linux
        if: matrix.os == 'ubuntu-latest'
        run: zip --junk-paths lindera-${{ matrix.feature }}-${{ matrix.target }}-${{ github.ref_name }}${{ matrix.archive }} target/${{ matrix.feature }}/${{ matrix.target }}/release/lindera${{ matrix.extension }}

      - name: Create artifact for Windows
        if: matrix.os == 'windows-latest'
        run: powershell Compress-Archive -DestinationPath lindera-${{ matrix.feature }}-${{ matrix.target }}-${{ github.ref_name }}${{ matrix.archive }} -Path target/${{ matrix.feature }}/${{ matrix.target }}/release/lindera${{ matrix.extension }}

      - name: Create artifact for OSX
        if: matrix.os == 'macos-latest'
        run: zip --junk-paths lindera-${{ matrix.feature }}-${{ matrix.target }}-${{ github.ref_name }}${{ matrix.archive }} target/${{ matrix.feature }}/${{ matrix.target }}/release/lindera${{ matrix.extension }}

      - name: Upload artifact
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: lindera-${{ matrix.feature }}-${{ matrix.target }}-${{ github.ref_name }}${{ matrix.archive }}
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true

  publish-crates:
    name: Publish crate
    strategy:
      matrix:
        os: [ubuntu-latest]
        toolchain: [stable]
    needs: [release]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          components: rustfmt, clippy

      - name: Publish lindera-dictionary
        run: |
          LINDERA_DICTIONARY_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="lindera-dictionary") | .version')
          LINDERA_DICTIONARY_VERSIONS=$(curl -s -XGET https://crates.io/api/v1/crates/lindera-dictionary | jq -r 'select(.versions != null) | .versions[].num')
          if echo ${LINDERA_DICTIONARY_VERSIONS} | grep ${LINDERA_DICTIONARY_VERSION} >/dev/null; then
            echo "lindera-dictionary ${LINDERA_DICTIONARY_VERSION} has already published"
          else
            pushd lindera-dictionary
            cargo publish --token ${{ secrets.CRATES_TOKEN }}
            popd
          fi
          sleep 20

      - name: Publish lindera-cc-cedict
        run: |
          LINDERA_CC_CEDICT_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="lindera-cc-cedict") | .version')
          LINDERA_CC_CEDICT_VERSIONS=$(curl -s -XGET https://crates.io/api/v1/crates/lindera-cc-cedict | jq -r 'select(.versions != null) | .versions[].num')
          if echo ${LINDERA_CC_CEDICT_VERSIONS} | grep ${LINDERA_CC_CEDICT_VERSION} >/dev/null; then
            echo "lindera-cc-cedict ${LINDERA_CC_CEDICT_VERSION} has already published"
          else
            pushd lindera-cc-cedict
            cargo publish --token ${{ secrets.CRATES_TOKEN }}
            popd
          fi
          sleep 20

      - name: Publish lindera-ipadic
        run: |
          LINDERA_IPADIC_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="lindera-ipadic") | .version')
          LINDERA_IPADIC_VERSIONS=$(curl -s -XGET https://crates.io/api/v1/crates/lindera-ipadic | jq -r 'select(.versions != null) | .versions[].num')
          if echo ${LINDERA_IPADIC_VERSIONS} | grep ${LINDERA_IPADIC_VERSION} >/dev/null; then
            echo "lindera-ipadic ${LINDERA_IPADIC_VERSION} has already published"
          else
            pushd lindera-ipadic
            cargo publish --token ${{ secrets.CRATES_TOKEN }}
            popd
          fi
          sleep 20

      - name: Publish lindera-ipadic-neologd
        run: |
          LINDERA_IPADIC_NEOLOGD_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="lindera-ipadic-neologd") | .version')
          LINDERA_IPADIC_NEOLOGD_VERSIONS=$(curl -s -XGET https://crates.io/api/v1/crates/lindera-ipadic-neologd | jq -r 'select(.versions != null) | .versions[].num')
          if echo ${LINDERA_IPADIC_NEOLOGD_VERSIONS} | grep ${LINDERA_IPADIC_NEOLOGD_VERSION} >/dev/null; then
            echo "lindera-ipadic-neologd ${LINDERA_IPADIC_NEOLOGD_VERSION} has already published"
          else
            pushd lindera-ipadic-neologd
            cargo publish --token ${{ secrets.CRATES_TOKEN }}
            popd
          fi
          sleep 20

      - name: Publish lindera-ko-dic
        run: |
          LINDERA_KO_DIC_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="lindera-ko-dic") | .version')
          LINDERA_KO_DIC_VERSIONS=$(curl -s -XGET https://crates.io/api/v1/crates/lindera-ko-dic | jq -r 'select(.versions != null) | .versions[].num')
          if echo ${LINDERA_KO_DIC_VERSIONS} | grep ${LINDERA_KO_DIC_VERSION} >/dev/null; then
            echo "lindera-ko-dic ${LINDERA_KO_DIC_VERSION} has already published"
          else
            pushd lindera-ko-dic
            cargo publish --token ${{ secrets.CRATES_TOKEN }}
            popd
          fi
          sleep 20

      - name: Publish lindera-unidic
        run: |
          LINDERA_UNIDIC_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="lindera-unidic") | .version')
          LINDERA_UNIDIC_VERSIONS=$(curl -s -XGET https://crates.io/api/v1/crates/lindera-unidic | jq -r 'select(.versions != null) | .versions[].num')
          if echo ${LINDERA_UNIDIC_VERSIONS} | grep ${LINDERA_UNIDIC_VERSION} >/dev/null; then
            echo "lindera-unidic ${LINDERA_UNIDIC_VERSION} has already published"
          else
            pushd lindera-unidic
            cargo publish --token ${{ secrets.CRATES_TOKEN }}
            popd
          fi
          sleep 20

      - name: Publish lindera
        run: |
          LINDERA_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="lindera") | .version')
          LINDERA_VERSIONS=$(curl -s -XGET https://crates.io/api/v1/crates/lindera | jq -r 'select(.versions != null) | .versions[].num')
          if echo ${LINDERA_VERSIONS} | grep ${LINDERA_VERSION} >/dev/null; then
            echo "lindera ${LINDERA_VERSION} has already published"
          else
            pushd lindera
            cargo publish --token ${{ secrets.CRATES_TOKEN }}
            popd
          fi
          sleep 20

      - name: Publish lindera-cli
        run: |
          LINDERA_CLI_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="lindera-cli") | .version')
          LINDERA_CLI_VERSIONS=$(curl -s -XGET https://crates.io/api/v1/crates/lindera-cli | jq -r 'select(.versions != null) | .versions[].num')
          if echo ${LINDERA_CLI_VERSIONS} | grep ${LINDERA_CLI_VERSION} >/dev/null; then
            echo "lindera-cli ${LINDERA_CLI_VERSION} has already published"
          else
            pushd lindera-cli
            cargo publish --token ${{ secrets.CRATES_TOKEN }}
            popd
          fi
